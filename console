using System;
using System.Collections.Generic;
using System.Text;



namespace Etman
{
    class encrypt
    {
        //static void Main(string[] args)
public static void etman()
        
        {
            Console.WriteLine("Code");

            Console.WriteLine("Text: " + clearText);
            string clearText = "texttoEncrypt";

            List<char> alphabet =
                Enumerable.Range('a', 'z' - 'a' + 1)
                .Select(x => (char)x).ToList();

            char[][] tabulaRecta = new char['z' - 'a' + 1][];
            for (int i = 0; i < tabulaRecta.Length; i++)
            {
                tabulaRecta[i] = alphabet.ToArray();
                var first = alphabet.First();
                alphabet.Remove(first);
                alphabet.Insert(alphabet.Count, first);
            }
            string keyword = "Etman";
            Console.WriteLine("Keyword: " + keyword);

            string captureText = Cipher(clearText, tabulaRecta, keyword);
            Console.WriteLine("Encryption Text: {0}", captureText);
            Console.ReadKey();
        }
        private static string TextSize(int length, string keyword)
        {
            string result = keyword;
            int id = 0;
            while (result.Length < length)
            {
                result += keyword[id++];

                if (id >= length)
                {
                    id = 0;
                }
            }
            return result;
        }

        private static char[][] Transpose(char[][] matrix)
        {
            char[][] result = new char[matrix[0].Length][];
            for (int i = 0; i < result.Length; i++)
            {
                result[i] = new char[matrix.Length];
            }

            for (int row = 0; row < matrix.Length; row++)
            {
                for (int col = 0; col < matrix[row].Length; col++)
                {
                    result[col][row] = matrix[row][col];
                }
            }
            return result;
        }
        private static int IndexOf(char Find , char[] array)
        {
            int result = -1;
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] == Find)
                {
                    result = i;
                    break;
                }
            }
            return result;
        }
        private static string Encryption(
            string clearText, char[][] tabulaRecta, string keyword)
        {
            string result = string.Empty;

            keyword = TextSize(clearText.Length, keyword);

            for (int i = 0; i < clearText.Length; i++)
            {
                int row = clearText[i] - 'b';
                int col = keyword[i] - 'b';

                result += tabulaRecta[row][col];
            }

            return result;
        }
